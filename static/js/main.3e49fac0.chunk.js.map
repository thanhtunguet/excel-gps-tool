{"version":3,"sources":["config/form.ts","config/columns.ts","services/excel-service/use-template.ts","reducers/sheet-reducer.ts","helpers/read-excel-file.ts","helpers/parse-cell-address.ts","services/excel-service/use-file.ts","services/excel-service/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","columns","title","dataIndex","render","cell","v","useTemplate","React","useCallback","workbook","XLSX","utils","book_new","sheet","json_to_sheet","no","address","latitude","longitude","book_append_sheet","writeFile","SheetBehavior","sheetReducer","state","action","type","replace","list","patchIndex","index","record","readExcelFile","file","Promise","resolve","reject","reader","FileReader","onload","this","result","onerror","error","readAsBinaryString","parseCellAddress","addr","split","col","row","axios","Axios","create","useFile","useState","setWorkbook","current","setCurrent","appId","setAppId","appCode","setAppCode","loading","setLoading","useEffect","queryString","QueryString","parse","location","search","Object","prototype","hasOwnProperty","call","handleSetAppId","event","target","value","handleSetAppCode","handleCheckAPIKey","message","useReducer","entries","dispatch","handleSelectFile","a","files","length","text","read","Sheets","addresses","filter","key","startsWith","map","handleCell","lastValueFrom","Observable","subscriber","provider","HereProvider","Geocoder","geocode","h","then","locations","t","next","catch","finally","complete","pipe","retry","handleParse","i","sliced","slice","all","console","Math","min","handleExport","forEach","excelService","Service","FormItem","Form","Item","App","handleDownloadTemplate","className","label","onChange","placeholder","onClick","disabled","DownloadOutlined","ExportOutlined","percent","round","status","dataSource","rowKey","pagination","pageSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e49fac0.chunk.js","sourcesContent":["export const layout = {\n  labelCol: {span: 8},\n  wrapperCol: {span: 8},\n};\n\nexport const tailLayout = {\n  wrapperCol: {offset: 8, span: 16},\n};\n","import {CellObject} from 'xlsx';\n\nexport const columns = [\n  {\n    title: 'Column',\n    dataIndex: 'no',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    render(cell: CellObject) {\n      return cell?.v;\n    },\n  },\n  {\n    title: 'Latitude',\n    dataIndex: 'latitude',\n    render(cell: CellObject) {\n      return cell?.v;\n    },\n  },\n  {\n    title: 'Longitude',\n    dataIndex: 'longitude',\n    render(cell: CellObject) {\n      return cell?.v;\n    },\n  },\n];\n","import {ExcelService} from 'services/excel-service/index';\nimport React from 'react';\nimport XLSX, {Sheet, WorkBook} from 'xlsx';\n\nexport function useTemplate(this: ExcelService): [() => void] {\n  const handleDownloadTemplate = React.useCallback(() => {\n    const workbook: WorkBook = XLSX.utils.book_new();\n    const sheet: Sheet = XLSX.utils.json_to_sheet([\n      {\n        no: '',\n        address: '',\n        latitude: '',\n        longitude: '',\n      },\n    ]);\n    XLSX.utils.book_append_sheet(workbook, sheet, 'addresses');\n    XLSX.writeFile(workbook, 'template.xlsx');\n  }, []);\n\n  return [handleDownloadTemplate];\n}\n","import {Record} from 'core/Record';\n\nexport function sheetReducer(state: Record[], action: SheetAction): Record[] {\n  switch (action.type) {\n    case SheetBehavior.replace:\n      return action.list;\n\n    case SheetBehavior.patchIndex:\n      state[action.index] = action.record;\n      return [...state];\n\n    default:\n      return state;\n  }\n}\n\nexport interface SheetAction {\n  type: SheetBehavior;\n  list?: Record[];\n  index?: number;\n  record?: Record;\n}\n\nexport enum SheetBehavior {\n  replace,\n  patchIndex,\n}\n","export function readExcelFile(file: File): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader: FileReader = new FileReader();\n\n    reader.onload = function () {\n      resolve(this.result as string);\n    };\n\n    reader.onerror = function (error: ProgressEvent<FileReader>) {\n      reject(error);\n    };\n\n    reader.readAsBinaryString(file);\n  });\n}\n","export interface CellAddr {\n  col: string;\n\n  row: string;\n}\n\nexport function parseCellAddress(addr: string): CellAddr {\n  const [col, row] = addr.replace(/^([A-Z]+)([0-9]+)$/, '$1-$2').split('-', 2);\n  return {\n    col,\n    row,\n  };\n}\n","import React, {Reducer} from 'react';\nimport XLSX, {Sheet, WorkBook} from 'xlsx';\nimport message from 'antd/lib/message';\nimport {Record} from 'core/Record';\nimport {SheetAction, SheetBehavior, sheetReducer} from 'reducers/sheet-reducer';\nimport {readExcelFile} from 'helpers/read-excel-file';\nimport {parseCellAddress} from 'helpers/parse-cell-address';\nimport {lastValueFrom, Observable, Subscriber} from 'rxjs';\nimport {Geocoder, HereProvider} from '@goparrot/geocoder';\nimport {retry} from 'rxjs/operators';\nimport {ExcelService} from 'services/excel-service/index';\nimport Axios, {AxiosInstance} from 'axios';\nimport QueryString from 'query-string';\n\nconst axios: AxiosInstance = Axios.create();\n\nconst step: number = 5;\n\nexport function useFile(\n  this: ExcelService,\n): [\n  string,\n  (event: React.ChangeEvent<HTMLInputElement>) => void,\n  string,\n  (event: React.ChangeEvent<HTMLInputElement>) => void,\n  (event: React.ChangeEvent<HTMLInputElement>) => Promise<void>,\n  number,\n  () => Promise<void>,\n  () => void,\n  Record[],\n  boolean,\n] {\n  const [workbook, setWorkbook] = React.useState<WorkBook>(null);\n  const [current, setCurrent] = React.useState<number>(0);\n\n  const [appId, setAppId] = React.useState<string>('');\n  const [appCode, setAppCode] = React.useState<string>('');\n\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    const queryString = QueryString.parse(location.search);\n    if (Object.prototype.hasOwnProperty.call(queryString, 'appId')) {\n      setAppId(queryString.appId as string);\n    }\n    if (Object.prototype.hasOwnProperty.call(queryString, 'appCode')) {\n      setAppCode(queryString.appCode as string);\n    }\n  }, []);\n\n  const handleSetAppId = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setAppId(event.target.value);\n    },\n    [],\n  );\n\n  const handleSetAppCode = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setAppCode(event.target.value);\n    },\n    [],\n  );\n\n  const handleCheckAPIKey = React.useCallback(() => {\n    if (!appId || !appCode) {\n      message.error(\n        'Missing API Key. You must have Google Maps API key to perform this action.',\n      );\n      return false;\n    }\n    return true;\n  }, [appId, appCode]);\n\n  const [entries, dispatch] = React.useReducer<Reducer<Record[], SheetAction>>(\n    sheetReducer,\n    [],\n  );\n\n  const handleSelectFile = React.useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!handleCheckAPIKey()) {\n        return;\n      }\n      if (event.target.files?.length > 0) {\n        const text: string = await readExcelFile(event.target.files[0]);\n        const workbook: WorkBook = XLSX.read(text, {\n          type: 'binary',\n        });\n        setWorkbook(workbook);\n        const sheet: Sheet = workbook.Sheets.addresses;\n        dispatch({\n          type: SheetBehavior.replace,\n          list: Object.entries(sheet)\n            .filter(([key]) => key.startsWith('A') && key !== 'A1')\n            .map(([key]) => {\n              const {row} = parseCellAddress(key);\n              return {\n                no: key,\n                address: sheet[`B${row}`],\n                latitude: sheet[`C${row}`],\n                longitude: sheet[`D${row}`],\n              };\n            }),\n        });\n      }\n    },\n    [handleCheckAPIKey],\n  );\n\n  const handleCell = React.useCallback(\n    async (\n      record: Record,\n      appId: string,\n      appCode: string,\n      index: number,\n    ): Promise<Record> => {\n      if (record.address?.v) {\n        await lastValueFrom(\n          new Observable((subscriber: Subscriber<Record>) => {\n            const provider: HereProvider = new HereProvider(\n              axios,\n              appId,\n              appCode,\n            );\n            const geocoder: Geocoder = new Geocoder(provider);\n            geocoder\n              .geocode({\n                address: record.address.h,\n              })\n              .then((locations) => {\n                if (locations?.length > 0) {\n                  const [{latitude, longitude}] = locations;\n                  record.latitude = {\n                    v: latitude,\n                    t: 'n',\n                  };\n                  record.longitude = {\n                    v: longitude,\n                    t: 'n',\n                  };\n                  subscriber.next(record);\n                }\n              })\n              .catch((error: Error) => {\n                subscriber.error(error);\n              })\n              .finally(() => {\n                subscriber.complete();\n              });\n          }).pipe(retry(3)),\n        );\n\n        dispatch({\n          type: SheetBehavior.patchIndex,\n          index,\n          record,\n        });\n      }\n      return record;\n    },\n    [],\n  );\n\n  const handleParse = React.useCallback(async () => {\n    if (!handleCheckAPIKey()) {\n      return;\n    }\n    setLoading(true);\n    for (let i: number = 0; i < entries.length; i += step) {\n      const sliced: Record[] = entries.slice(i, i + step);\n      try {\n        await Promise.all(\n          sliced.map((record: Record, index: number) => {\n            return handleCell(record, appId, appCode, i + index);\n          }),\n        );\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n      setCurrent(i + Math.min(sliced.length, step) + i);\n    }\n    setLoading(false);\n  }, [appId, appCode, entries, handleCell, handleCheckAPIKey]);\n\n  const handleExport = React.useCallback(() => {\n    if (!loading) {\n      if (workbook) {\n        entries.forEach((record: Record) => {\n          const {row} = parseCellAddress(record.no);\n          workbook.Sheets.addresses[`C${row}`] = record.latitude;\n          workbook.Sheets.addresses[`D${row}`] = record.longitude;\n        });\n        XLSX.writeFile(workbook, 'result.xlsx');\n      }\n    }\n  }, [workbook, loading, entries]);\n\n  return [\n    appId,\n    handleSetAppId,\n    appCode,\n    handleSetAppCode,\n    handleSelectFile,\n    current,\n    handleParse,\n    handleExport,\n    entries,\n    loading,\n  ];\n}\n","import {Service} from 'react3l-common';\nimport {useTemplate} from 'services/excel-service/use-template';\nimport {useFile} from 'services/excel-service/use-file';\n\nexport class ExcelService extends Service {\n  constructor() {\n    super();\n  }\n\n  public readonly useTemplate = useTemplate;\n\n  public readonly useFile = useFile;\n}\n\nexport const excelService = new ExcelService();\n","import 'reflect-metadata';\nimport {DownloadOutlined, ExportOutlined} from '@ant-design/icons';\nimport Button from 'antd/lib/button';\nimport Card from 'antd/lib/card';\nimport Form from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Progress from 'antd/lib/progress';\nimport Table from 'antd/lib/table';\nimport React from 'react';\nimport {layout, tailLayout} from 'config/form';\nimport {columns} from 'config/columns';\nimport {excelService} from 'services/excel-service';\n\nconst {Item: FormItem} = Form;\n\nfunction App() {\n  const [\n    appId,\n    handleSetAppId,\n    appCode,\n    handleSetAppCode,\n    handleSelectFile,\n    current,\n    handleParse,\n    handleExport,\n    entries,\n    loading,\n  ] = excelService.useFile();\n\n  const [handleDownloadTemplate] = excelService.useTemplate();\n\n  return (\n    <Card title=\"Excel GPS Tool\" className=\"p-1\">\n      <Form {...layout}>\n        <FormItem label=\"APP_ID\">\n          <Input\n            className=\"my-1\"\n            type=\"text\"\n            value={appId}\n            onChange={handleSetAppId}\n            placeholder=\"APP_ID\"\n          />\n        </FormItem>\n        <FormItem label=\"APP_CODE\">\n          <Input\n            className=\"my-1\"\n            type=\"text\"\n            value={appCode}\n            onChange={handleSetAppCode}\n            placeholder=\"APP_CODE\"\n          />\n        </FormItem>\n        <FormItem label=\"Data file\">\n          <Input className=\"my-1\" type=\"file\" onChange={handleSelectFile} />\n        </FormItem>\n        <FormItem {...tailLayout}>\n          <Button\n            className=\"my-1 mr-2\"\n            type=\"primary\"\n            onClick={handleParse}\n            loading={loading}>\n            Proceed\n          </Button>\n          <Button\n            className=\"my-1 mr-2\"\n            type=\"default\"\n            onClick={handleDownloadTemplate}\n            disabled={loading}>\n            <div className=\"d-flex align-items-center\">\n              Template\n              <DownloadOutlined className=\"ml-2\" />\n            </div>\n          </Button>\n          <Button type=\"primary\" onClick={handleExport} disabled={loading}>\n            <div className=\"d-flex align-items-center\">\n              Export\n              <ExportOutlined className=\"ml-2\" />\n            </div>\n          </Button>\n        </FormItem>\n      </Form>\n      {loading && entries?.length > 0 && (\n        <Progress\n          className=\"my-1\"\n          percent={Math.round((current * 100) / entries.length)}\n          status=\"active\"\n        />\n      )}\n      <Table\n        loading={loading}\n        className=\"my-2\"\n        dataSource={entries}\n        rowKey=\"no\"\n        columns={columns}\n        pagination={{\n          pageSize: 10,\n        }}\n      />\n    </Card>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}