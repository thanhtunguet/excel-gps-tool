{"version":3,"sources":["helpers/parse-cell-address.ts","helpers/read-excel-file.ts","reducers/sheet-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseCellAddress","addr","replace","split","col","row","readExcelFile","file","Promise","resolve","reject","reader","FileReader","onload","this","result","onerror","error","readAsBinaryString","SheetBehavior","sheetReducer","state","action","type","list","patchIndex","index","record","client","Client","App","React","useState","workbook","setWorkbook","current","setCurrent","apiKey","setApiKey","loading","setLoading","handleSetApiKey","useCallback","event","target","value","useReducer","entries","dispatch","handleSelectFile","a","files","length","text","XLSX","read","sheet","Sheets","addresses","Object","filter","key","startsWith","map","no","address","latitude","longitude","handleCell","v","Observable","subscriber","geocode","params","h","then","response","data","results","geometry","location","lat","lng","t","next","catch","finally","complete","pipe","retry","toPromise","handleParse","i","sliced","slice","all","Math","min","handleExport","forEach","writeFile","columns","useMemo","title","dataIndex","render","cell","renderTitle","className","onClick","disabled","handleDownloadTemplate","utils","book_new","json_to_sheet","book_append_sheet","onChange","placeholder","percent","round","status","dataSource","rowKey","pagination","pageSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f044f936.chunk.js","sourcesContent":["export interface CellAddr {\n  col: string;\n\n  row: string;\n}\n\nexport function parseCellAddress(addr: string): CellAddr {\n  const [col, row] = addr.replace(/^([A-Z]+)([0-9]+)$/, '$1-$2').split('-', 2);\n  return {\n    col,\n    row,\n  };\n}\n","export function readExcelFile(file: File): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader: FileReader = new FileReader();\n\n    reader.onload = function () {\n      resolve(this.result as string);\n    };\n\n    reader.onerror = function (error: ProgressEvent<FileReader>) {\n      reject(error);\n    };\n\n    reader.readAsBinaryString(file);\n  });\n}\n","import {Record} from 'core/Record';\n\nexport function sheetReducer(state: Record[], action: SheetAction): Record[] {\n  switch (action.type) {\n    case SheetBehavior.replace:\n      return action.list;\n\n    case SheetBehavior.patchIndex:\n      state[action.index] = action.record;\n      return [...state];\n\n    default:\n      return state;\n  }\n}\n\nexport interface SheetAction {\n  type: SheetBehavior;\n  list?: Record[];\n  index?: number;\n  record?: Record;\n}\n\nexport enum SheetBehavior {\n  replace,\n  patchIndex,\n}\n","import {Client, GeocodeResponse} from '@googlemaps/google-maps-services-js';\nimport Button from 'antd/lib/button';\nimport Card from 'antd/lib/card';\nimport Input from 'antd/lib/input';\nimport Progress from 'antd/lib/progress';\nimport Table, {ColumnProps} from 'antd/lib/table';\nimport {Record} from 'core/Record';\nimport {parseCellAddress} from 'helpers/parse-cell-address';\nimport {readExcelFile} from 'helpers/read-excel-file';\nimport React, {Reducer} from 'react';\nimport {SheetAction, SheetBehavior, sheetReducer} from 'reducers/sheet-reducer';\nimport {Observable, Subscriber} from 'rxjs';\nimport {retry} from 'rxjs/operators';\nimport XLSX, {CellObject, Sheet, WorkBook} from 'xlsx';\nimport './App.css';\n\nconst client: Client = new Client();\n\nconst step: number = 5;\n\nfunction App() {\n  const [workbook, setWorkbook] = React.useState<WorkBook>(null);\n\n  const [current, setCurrent] = React.useState<number>(0);\n\n  const [apiKey, setApiKey] = React.useState<string>('');\n\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const handleSetApiKey = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setApiKey(event.target.value);\n    },\n    [],\n  );\n\n  const [entries, dispatch] = React.useReducer<Reducer<Record[], SheetAction>>(\n    sheetReducer,\n    [],\n  );\n\n  const handleSelectFile = React.useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (event.target.files?.length > 0) {\n        const text: string = await readExcelFile(event.target.files[0]);\n        const workbook: WorkBook = XLSX.read(text, {\n          type: 'binary',\n        });\n        setWorkbook(workbook);\n        const sheet: Sheet = workbook.Sheets.addresses;\n        dispatch({\n          type: SheetBehavior.replace,\n          list: Object.entries(sheet)\n            .filter(([key]) => key.startsWith('A') && key !== 'A1')\n            .map(([key]) => {\n              const {row} = parseCellAddress(key);\n              return {\n                no: key,\n                address: sheet[`B${row}`],\n                latitude: sheet[`C${row}`],\n                longitude: sheet[`D${row}`],\n              };\n            }),\n        });\n      }\n    },\n    [],\n  );\n\n  const handleCell = React.useCallback(\n    async (record: Record, apiKey: string, index: number): Promise<Record> => {\n      if (record.address?.v) {\n        await new Observable((subscriber: Subscriber<Record>) => {\n          client\n            .geocode({\n              params: {\n                address: record.address?.h,\n                key: apiKey,\n              },\n            })\n            .then((response: GeocodeResponse) => {\n              if (response.data.results?.length > 0) {\n                const {lat, lng} = response.data.results[0].geometry.location;\n                record.latitude = {\n                  v: lat,\n                  t: 'n',\n                };\n                record.longitude = {\n                  v: lng,\n                  t: 'n',\n                };\n                subscriber.next(record);\n              }\n            })\n            .catch((error: Error) => {\n              subscriber.error(error);\n            })\n            .finally(() => {\n              subscriber.complete();\n            });\n        })\n          .pipe(retry(3))\n          .toPromise();\n        dispatch({\n          type: SheetBehavior.patchIndex,\n          index,\n          record,\n        });\n      }\n      return record;\n    },\n    [],\n  );\n\n  const handleParse = React.useCallback(async () => {\n    setLoading(true);\n    for (let i: number = 0; i < entries.length; i += step) {\n      const sliced: Record[] = entries.slice(i, i + step);\n      try {\n        await Promise.all(\n          sliced.map((record: Record, index: number) => {\n            return handleCell(record, apiKey, i + index);\n          }),\n        );\n      } catch (error) {}\n      setCurrent(i + Math.min(sliced.length, step) + i);\n    }\n    setLoading(false);\n  }, [apiKey, entries, handleCell]);\n\n  const handleExport = React.useCallback(() => {\n    if (!loading) {\n      entries.forEach((record: Record) => {\n        const {row} = parseCellAddress(record.no);\n        workbook.Sheets.addresses[`C${row}`] = record.latitude;\n        workbook.Sheets.addresses[`D${row}`] = record.longitude;\n      });\n      XLSX.writeFile(workbook, 'result.xlsx');\n    }\n  }, [workbook, loading, entries]);\n\n  const columns: Array<ColumnProps<Record>> = React.useMemo(() => {\n    return [\n      {\n        title: 'Column',\n        dataIndex: 'no',\n      },\n      {\n        title: 'Address',\n        dataIndex: 'address',\n        render(cell: CellObject) {\n          return cell?.v;\n        },\n      },\n      {\n        title: 'Latitude',\n        dataIndex: 'latitude',\n        render(cell: CellObject) {\n          return cell?.v;\n        },\n      },\n      {\n        title: 'Longitude',\n        dataIndex: 'longitude',\n        render(cell: CellObject) {\n          return cell?.v;\n        },\n      },\n    ];\n  }, []);\n\n  const renderTitle = React.useCallback(\n    () => (\n      <div className=\"w-100 d-flex justify-content-end\">\n        <Button type=\"primary\" onClick={handleExport} disabled={loading}>\n          Export\n        </Button>\n      </div>\n    ),\n    [handleExport, loading],\n  );\n\n  const handleDownloadTemplate = React.useCallback(() => {\n    const workbook: WorkBook = XLSX.utils.book_new();\n    const sheet: Sheet = XLSX.utils.json_to_sheet([\n      {\n        no: '',\n        address: '',\n        latitude: '',\n        longitude: '',\n      },\n    ]);\n    XLSX.utils.book_append_sheet(workbook, sheet, 'addresses');\n    XLSX.writeFile(workbook, 'template.xlsx');\n  }, []);\n\n  return (\n    <Card title=\"GMaps Coordinate Filler\" className=\"p-1\">\n      <Input\n        className=\"my-1\"\n        type=\"text\"\n        value={apiKey}\n        onChange={handleSetApiKey}\n        placeholder=\"API Key\"\n      />\n      <Input className=\"my-1\" type=\"file\" onChange={handleSelectFile} />\n      <div className=\"d-flex justify-content-between\">\n        <Button\n          className=\"my-1\"\n          type=\"default\"\n          onClick={handleDownloadTemplate}\n          disabled={loading}>\n          Download template\n        </Button>\n        <Button\n          className=\"my-1\"\n          type=\"primary\"\n          onClick={handleParse}\n          loading={loading}>\n          Proceed\n        </Button>\n      </div>\n      {loading && entries?.length > 0 && (\n        <Progress\n          className=\"my-1\"\n          percent={Math.round((current * 100) / entries.length)}\n          status=\"active\"\n        />\n      )}\n      <Table\n        title={renderTitle}\n        className=\"my-1\"\n        dataSource={entries}\n        rowKey=\"no\"\n        columns={columns}\n        pagination={{pageSize: entries?.length ?? 10}}\n      />\n    </Card>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}