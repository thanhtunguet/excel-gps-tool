{"version":3,"sources":["helpers/parse-cell-address.ts","helpers/read-excel-file.ts","reducers/sheet-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseCellAddress","addr","replace","split","col","row","readExcelFile","file","Promise","resolve","reject","reader","FileReader","onload","this","result","onerror","error","readAsBinaryString","SheetBehavior","sheetReducer","state","action","type","list","patchIndex","index","record","FormItem","Form","Item","layout","labelCol","span","wrapperCol","tailLayout","offset","client","Client","App","React","useState","workbook","setWorkbook","current","setCurrent","apiKey","setApiKey","loading","setLoading","handleSetApiKey","useCallback","event","target","value","handleCheckAPIKey","message","useReducer","entries","dispatch","handleSelectFile","a","files","length","text","XLSX","read","sheet","Sheets","addresses","Object","filter","key","startsWith","map","no","address","latitude","longitude","handleCell","v","Observable","subscriber","geocode","params","h","then","response","data","results","geometry","location","lat","lng","t","next","catch","finally","complete","pipe","retry","toPromise","handleParse","i","sliced","slice","all","Math","min","handleExport","forEach","writeFile","handleDownloadTemplate","utils","book_new","json_to_sheet","book_append_sheet","columns","useMemo","title","dataIndex","render","cell","className","label","onChange","placeholder","onClick","disabled","DownloadOutlined","ExportOutlined","percent","round","status","dataSource","rowKey","pagination","pageSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6aa9e27f.chunk.js","sourcesContent":["export interface CellAddr {\n  col: string;\n\n  row: string;\n}\n\nexport function parseCellAddress(addr: string): CellAddr {\n  const [col, row] = addr.replace(/^([A-Z]+)([0-9]+)$/, '$1-$2').split('-', 2);\n  return {\n    col,\n    row,\n  };\n}\n","export function readExcelFile(file: File): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader: FileReader = new FileReader();\n\n    reader.onload = function () {\n      resolve(this.result as string);\n    };\n\n    reader.onerror = function (error: ProgressEvent<FileReader>) {\n      reject(error);\n    };\n\n    reader.readAsBinaryString(file);\n  });\n}\n","import {Record} from 'core/Record';\n\nexport function sheetReducer(state: Record[], action: SheetAction): Record[] {\n  switch (action.type) {\n    case SheetBehavior.replace:\n      return action.list;\n\n    case SheetBehavior.patchIndex:\n      state[action.index] = action.record;\n      return [...state];\n\n    default:\n      return state;\n  }\n}\n\nexport interface SheetAction {\n  type: SheetBehavior;\n  list?: Record[];\n  index?: number;\n  record?: Record;\n}\n\nexport enum SheetBehavior {\n  replace,\n  patchIndex,\n}\n","import {DownloadOutlined, ExportOutlined} from '@ant-design/icons';\nimport {Client, GeocodeResponse} from '@googlemaps/google-maps-services-js';\nimport Button from 'antd/lib/button';\nimport Card from 'antd/lib/card';\nimport Form from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Progress from 'antd/lib/progress';\nimport Table, {ColumnProps} from 'antd/lib/table';\nimport {Record} from 'core/Record';\nimport {parseCellAddress} from 'helpers/parse-cell-address';\nimport {readExcelFile} from 'helpers/read-excel-file';\nimport React, {Reducer} from 'react';\nimport {SheetAction, SheetBehavior, sheetReducer} from 'reducers/sheet-reducer';\nimport {Observable, Subscriber} from 'rxjs';\nimport {retry} from 'rxjs/operators';\nimport XLSX, {CellObject, Sheet, WorkBook} from 'xlsx';\nimport message from 'antd/lib/message';\n\nconst {Item: FormItem} = Form;\n\nconst layout = {\n  labelCol: {span: 8},\n  wrapperCol: {span: 8},\n};\n\nconst tailLayout = {\n  wrapperCol: {offset: 8, span: 16},\n};\n\nconst client: Client = new Client();\n\nconst step: number = 5;\n\nfunction App() {\n  const [workbook, setWorkbook] = React.useState<WorkBook>(null);\n\n  const [current, setCurrent] = React.useState<number>(0);\n\n  const [apiKey, setApiKey] = React.useState<string>('');\n\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const handleSetApiKey = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setApiKey(event.target.value);\n    },\n    [],\n  );\n\n  const handleCheckAPIKey = React.useCallback(() => {\n    if (!apiKey) {\n      message.error(\n        'Missing API Key. You must have Google Maps API key to perform this action.',\n      );\n    }\n    return !!apiKey;\n  }, [apiKey]);\n\n  const [entries, dispatch] = React.useReducer<Reducer<Record[], SheetAction>>(\n    sheetReducer,\n    [],\n  );\n\n  const handleSelectFile = React.useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!handleCheckAPIKey()) {\n        return;\n      }\n      if (event.target.files?.length > 0) {\n        const text: string = await readExcelFile(event.target.files[0]);\n        const workbook: WorkBook = XLSX.read(text, {\n          type: 'binary',\n        });\n        setWorkbook(workbook);\n        const sheet: Sheet = workbook.Sheets.addresses;\n        dispatch({\n          type: SheetBehavior.replace,\n          list: Object.entries(sheet)\n            .filter(([key]) => key.startsWith('A') && key !== 'A1')\n            .map(([key]) => {\n              const {row} = parseCellAddress(key);\n              return {\n                no: key,\n                address: sheet[`B${row}`],\n                latitude: sheet[`C${row}`],\n                longitude: sheet[`D${row}`],\n              };\n            }),\n        });\n      }\n    },\n    [handleCheckAPIKey],\n  );\n\n  const handleCell = React.useCallback(\n    async (record: Record, apiKey: string, index: number): Promise<Record> => {\n      if (record.address?.v) {\n        await new Observable((subscriber: Subscriber<Record>) => {\n          client\n            .geocode({\n              params: {\n                address: record.address?.h,\n                key: apiKey,\n              },\n            })\n            .then((response: GeocodeResponse) => {\n              if (response.data.results?.length > 0) {\n                const {lat, lng} = response.data.results[0].geometry.location;\n                record.latitude = {\n                  v: lat,\n                  t: 'n',\n                };\n                record.longitude = {\n                  v: lng,\n                  t: 'n',\n                };\n                subscriber.next(record);\n              }\n            })\n            .catch((error: Error) => {\n              subscriber.error(error);\n            })\n            .finally(() => {\n              subscriber.complete();\n            });\n        })\n          .pipe(retry(3))\n          .toPromise();\n        dispatch({\n          type: SheetBehavior.patchIndex,\n          index,\n          record,\n        });\n      }\n      return record;\n    },\n    [],\n  );\n\n  const handleParse = React.useCallback(async () => {\n    if (!handleCheckAPIKey()) {\n      return;\n    }\n    setLoading(true);\n    for (let i: number = 0; i < entries.length; i += step) {\n      const sliced: Record[] = entries.slice(i, i + step);\n      try {\n        await Promise.all(\n          sliced.map((record: Record, index: number) => {\n            return handleCell(record, apiKey, i + index);\n          }),\n        );\n      } catch (error) {}\n      setCurrent(i + Math.min(sliced.length, step) + i);\n    }\n    setLoading(false);\n  }, [apiKey, entries, handleCell, handleCheckAPIKey]);\n\n  const handleExport = React.useCallback(() => {\n    if (!loading) {\n      entries.forEach((record: Record) => {\n        const {row} = parseCellAddress(record.no);\n        workbook.Sheets.addresses[`C${row}`] = record.latitude;\n        workbook.Sheets.addresses[`D${row}`] = record.longitude;\n      });\n      XLSX.writeFile(workbook, 'result.xlsx');\n    }\n  }, [workbook, loading, entries]);\n\n  const handleDownloadTemplate = React.useCallback(() => {\n    const workbook: WorkBook = XLSX.utils.book_new();\n    const sheet: Sheet = XLSX.utils.json_to_sheet([\n      {\n        no: '',\n        address: '',\n        latitude: '',\n        longitude: '',\n      },\n    ]);\n    XLSX.utils.book_append_sheet(workbook, sheet, 'addresses');\n    XLSX.writeFile(workbook, 'template.xlsx');\n  }, []);\n\n  const columns: Array<ColumnProps<Record>> = React.useMemo(() => {\n    return [\n      {\n        title: 'Column',\n        dataIndex: 'no',\n      },\n      {\n        title: 'Address',\n        dataIndex: 'address',\n        render(cell: CellObject) {\n          return cell?.v;\n        },\n      },\n      {\n        title: 'Latitude',\n        dataIndex: 'latitude',\n        render(cell: CellObject) {\n          return cell?.v;\n        },\n      },\n      {\n        title: 'Longitude',\n        dataIndex: 'longitude',\n        render(cell: CellObject) {\n          return cell?.v;\n        },\n      },\n    ];\n  }, []);\n\n  return (\n    <Card title=\"GMaps Coordinate Filler\" className=\"p-1\">\n      <Form {...layout}>\n        <FormItem label=\"API Key\">\n          <Input\n            className=\"my-1\"\n            type=\"text\"\n            value={apiKey}\n            onChange={handleSetApiKey}\n            placeholder=\"API Key\"\n          />\n        </FormItem>\n        <FormItem label=\"Data file\">\n          <Input className=\"my-1\" type=\"file\" onChange={handleSelectFile} />\n        </FormItem>\n        <FormItem {...tailLayout}>\n          <Button\n            className=\"my-1 mr-2\"\n            type=\"primary\"\n            onClick={handleParse}\n            loading={loading}>\n            Proceed\n          </Button>\n          <Button\n            className=\"my-1 mr-2\"\n            type=\"default\"\n            onClick={handleDownloadTemplate}\n            disabled={loading}>\n            <div className=\"d-flex align-items-center\">\n              Template\n              <DownloadOutlined className=\"ml-2\" />\n            </div>\n          </Button>\n          <Button type=\"primary\" onClick={handleExport} disabled={loading}>\n            <div className=\"d-flex align-items-center\">\n              Export\n              <ExportOutlined className=\"ml-2\" />\n            </div>\n          </Button>\n        </FormItem>\n      </Form>\n      {loading && entries?.length > 0 && (\n        <Progress\n          className=\"my-1\"\n          percent={Math.round((current * 100) / entries.length)}\n          status=\"active\"\n        />\n      )}\n      <Table\n        className=\"my-1\"\n        dataSource={entries}\n        rowKey=\"no\"\n        columns={columns}\n        pagination={{pageSize: entries?.length ?? 10}}\n      />\n    </Card>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}